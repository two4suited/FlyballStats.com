@page "/tournament-upload"
@using Microsoft.AspNetCore.Components.Forms
@using flyballstats.Web.Services
@using flyballstats.Web.Components.Dialogs
@inject TournamentApiClient TournamentApi
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ErrorReportService ErrorReportService
@inject IJSRuntime JSRuntime

<PageTitle>Upload Tournament CSV</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Upload Tournament CSV</MudText>
<MudText Typo="Typo.body1" Class="mb-4">
    Upload a CSV file containing race schedules. The CSV must have the following headers: Race Number, Left Team, Right Team, Division.
</MudText>

<MudGrid>
    <MudItem xs="12" md="8">
        <MudPaper Class="pa-6" Elevation="2">
            <EditForm Model="@uploadModel" OnValidSubmit="@HandleUpload">
                <DataAnnotationsValidator />
                
                <MudTextField @bind-Value="uploadModel.TournamentId"
                              For="@(() => uploadModel.TournamentId)"
                              Label="Tournament ID"
                              Placeholder="e.g., summer-2024"
                              Variant="Variant.Outlined"
                              Class="mb-4" />

                <MudTextField @bind-Value="uploadModel.TournamentName"
                              For="@(() => uploadModel.TournamentName)"
                              Label="Tournament Name"
                              Placeholder="e.g., Summer Championship 2024"
                              Variant="Variant.Outlined"
                              Class="mb-4" />

                <MudText Class="mb-2">CSV File</MudText>
                <MudStack Row="true" Class="mb-4">
                    <MudFileUpload T="IBrowserFile" Accept=".csv" FilesChanged="HandleFileSelected">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Select CSV File
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    @if (!string.IsNullOrEmpty(selectedFileName))
                    {
                        <MudChip T="string" Icon="@Icons.Material.Filled.AttachFile" Color="Color.Success">@selectedFileName</MudChip>
                    }
                </MudStack>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           ButtonType="ButtonType.Submit"
                           Disabled="@(isUploading || string.IsNullOrEmpty(csvContent))"
                           StartIcon="@Icons.Material.Filled.Upload"
                           Class="mt-3">
                    @if (isUploading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Uploading...</MudText>
                    }
                    else
                    {
                        <MudText>Upload CSV</MudText>
                    }
                </MudButton>
            </EditForm>
        </MudPaper>
    </MudItem>
    
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-6" Elevation="1">
            <MudText Typo="Typo.h6" GutterBottom="true">CSV Format Requirements</MudText>
            <MudList T="string">
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" Text="Race Number" />
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" Text="Left Team" />
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" Text="Right Team" />
                <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" Text="Division" />
            </MudList>
            <MudAlert Severity="Severity.Info" Class="mt-3">
                File size limit: 1MB
            </MudAlert>
        </MudPaper>
    </MudItem>
</MudGrid>

@if (uploadResult != null)
{
    <MudPaper Class="pa-6 mt-6" Elevation="2">
        @if (uploadResult.Success)
        {
            <MudAlert Severity="Severity.Success">
                <MudText Typo="Typo.h6">Upload Successful!</MudText>
                <MudText>@uploadResult.Message</MudText>
                @if (uploadResult.RacesImported.HasValue)
                {
                    <MudText><strong>Races imported:</strong> @uploadResult.RacesImported</MudText>
                }
            </MudAlert>
        }
        else
        {
            <MudAlert Severity="Severity.Error">
                <MudText Typo="Typo.h6">Upload Failed</MudText>
                <MudText>@uploadResult.Message</MudText>
            </MudAlert>
            
            @if (uploadResult.Errors != null && uploadResult.Errors.Count > 0)
            {
                var errorSummary = ErrorReportService.GenerateErrorSummary(uploadResult.Errors);
                
                <!-- Error Summary Section -->
                <MudCard Class="mt-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Error" Class="mr-2" />
                                Error Summary (@errorSummary.TotalErrors errors found)
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Primary" 
                                       StartIcon="@Icons.Material.Filled.Download"
                                       OnClick="@(() => DownloadErrorReport("csv"))"
                                       Size="Size.Small">
                                Download CSV
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Secondary" 
                                       StartIcon="@Icons.Material.Filled.Download"
                                       OnClick="@(() => DownloadErrorReport("txt"))"
                                       Size="Size.Small"
                                       Class="ml-2">
                                Download Report
                            </MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body2" Class="mb-3">
                            Please fix these errors in your CSV file before re-uploading:
                        </MudText>
                        
                        @if (errorSummary.ErrorsByType.Count > 0)
                        {
                            <MudGrid>
                                @foreach (var errorType in errorSummary.ErrorsByType)
                                {
                                    <MudItem xs="6" sm="4" md="3">
                                        <MudAlert Severity="Severity.Warning" Dense="true">
                                            <MudText Typo="Typo.body2">
                                                <strong>@errorType.FieldName:</strong> @errorType.Count error(s)
                                            </MudText>
                                        </MudAlert>
                                    </MudItem>
                                }
                            </MudGrid>
                        }
                    </MudCardContent>
                </MudCard>

                <!-- Detailed Errors Table -->
                <MudExpansionPanels Class="mt-4">
                    <MudExpansionPanel Text="View Detailed Errors">
                        <MudDataGrid Items="@uploadResult.Errors" Dense="true" Hover="true" Filterable="true">
                            <Columns>
                                <PropertyColumn Property="x => x.RowNumber" Title="Row" />
                                <PropertyColumn Property="x => x.Field" Title="Field" />
                                <PropertyColumn Property="x => x.Value" Title="Value" />
                                <PropertyColumn Property="x => x.Reason" Title="Reason" />
                            </Columns>
                        </MudDataGrid>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }
        }
    </MudPaper>
}

@code {
    private UploadModel uploadModel = new();
    private string? csvContent;
    private string? selectedFileName;
    private bool isUploading = false;
    private CsvUploadResponse? uploadResult;

    private async Task HandleFileSelected(IBrowserFile file)
    {
        selectedFileName = file.Name;
        
        if (file.Size > 1024 * 1024) // 1MB limit
        {
            Snackbar.Add("File size must be less than 1MB", Severity.Error);
            csvContent = null;
            StateHasChanged();
            return;
        }

        try
        {
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);
            csvContent = await reader.ReadToEndAsync();
            Snackbar.Add("File loaded successfully", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error reading file: {ex.Message}", Severity.Error);
            csvContent = null;
            selectedFileName = null;
            StateHasChanged();
        }
    }

    private async Task HandleUpload()
    {
        if (string.IsNullOrEmpty(csvContent))
        {
            Snackbar.Add("Please select a CSV file first", Severity.Warning);
            return;
        }

        isUploading = true;
        uploadResult = null;

        try
        {
            // Check if tournament already exists
            var tournamentExists = await TournamentApi.TournamentExistsAsync(uploadModel.TournamentId!);
            
            if (tournamentExists)
            {
                // Show confirmation dialog
                var parameters = new DialogParameters<TournamentReplaceConfirmDialog>
                {
                    { x => x.TournamentId, uploadModel.TournamentId! },
                    { x => x.RaceCount, 0 } // We don't know race count yet, but we'll update this if needed
                };

                var dialog = await DialogService.ShowAsync<TournamentReplaceConfirmDialog>("Confirm Tournament Replacement", parameters);
                var result = await dialog.Result;

                if (result?.Canceled == true || result == null)
                {
                    Snackbar.Add("Upload canceled", Severity.Info);
                    return;
                }
            }

            // Proceed with upload
            uploadResult = await TournamentApi.UploadCsvAsync(uploadModel.TournamentId!, uploadModel.TournamentName!, csvContent);
            
            if (uploadResult.Success)
            {
                Snackbar.Add("Tournament data uploaded successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Upload failed. Please check the errors below.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            uploadResult = new CsvUploadResponse(false, $"An error occurred: {ex.Message}", null, null);
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            isUploading = false;
        }
    }

    private async Task DownloadErrorReport(string format)
    {
        if (uploadResult?.Errors == null || uploadResult.Errors.Count == 0)
            return;

        try
        {
            string content;
            string fileName;
            string mimeType;

            if (format == "csv")
            {
                content = ErrorReportService.GenerateErrorReportCsv(uploadResult.Errors);
                fileName = $"tournament-errors-{uploadModel.TournamentId}-{DateTime.Now:yyyyMMdd-HHmmss}.csv";
                mimeType = "text/csv";
            }
            else
            {
                content = ErrorReportService.GenerateErrorReportText(uploadResult.Errors);
                fileName = $"tournament-errors-{uploadModel.TournamentId}-{DateTime.Now:yyyyMMdd-HHmmss}.txt";
                mimeType = "text/plain";
            }

            var bytes = System.Text.Encoding.UTF8.GetBytes(content);
            var base64 = Convert.ToBase64String(bytes);
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64, mimeType);
            
            Snackbar.Add($"Error report downloaded: {fileName}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error downloading report: {ex.Message}", Severity.Error);
        }
    }

    public class UploadModel
    {
        [Required]
        public string? TournamentId { get; set; }

        [Required]
        public string? TournamentName { get; set; }
    }
}