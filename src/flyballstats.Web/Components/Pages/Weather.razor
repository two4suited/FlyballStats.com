@page "/weather"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi

<PageTitle>Weather</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather Forecast</MudText>

<MudText Typo="Typo.body1" Class="mb-4">
    This component demonstrates showing data loaded from a backend API service.
</MudText>

@if (forecasts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    <MudText>Loading...</MudText>
}
else
{
    <MudDataGrid Items="@forecasts" Hover="true" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Weather Data</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" 
                          Placeholder="Search" 
                          Adornment="Adornment.Start" 
                          Immediate="true"
                          AdornmentIcon="Icons.Material.Filled.Search" 
                          IconSize="Size.Medium" 
                          Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Date" Title="Date" Format="yyyy-MM-dd" />
            <PropertyColumn Property="x => x.TemperatureC" Title="Temp. (C)" />
            <PropertyColumn Property="x => x.TemperatureF" Title="Temp. (F)" />
            <PropertyColumn Property="x => x.Summary" Title="Summary" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="WeatherForecast" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private WeatherForecast[]? forecasts;
    private string _searchString = "";

    private Func<WeatherForecast, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Summary?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        if (x.Date.ToShortDateString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();
    }
}
